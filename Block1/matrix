#!/bin/bash

width=0 #Some portion of the script depend on an initial of zero

#Takes a matrix as an argument and returns a tuple containing the height and widthe of the matrix
getDims(){
	local lineCount=$(cat $1 | wc -l)
	#Compares the width of each row in the matrix to the one above it before returning the overall width. If any row has a different width, an error is thrown
	while read line
	do
		local colCount=$(echo $line | wc -w)
		if [[ $width == 0 ]]; then
			width=$colCount
		fi
		if [[ $width != $colCount ]]; then
			exit 1
		fi
	done < $1	
	echo $"$lineCount $colCount"
}

#Meant to compare dimensions. Forgot to use it.
compDims(){
	echo "Compares dimensions of two matricies"
}

#Arg: matrix
#Ret: transposed matrix
tpose(){
	local dims=$(getDims $1)
	local width=$(echo $dims | cut -d " " -f 2)
	local newidth=$(echo $dims | cut -d " " -f 1)
	#Loops through each column in the matrix, cuts, rotates, and appends it to a file named tPosed$$
	for (( i=1 ; i <= $width; i++ )); do 
		local newrow=$(cut -f $i $1 | tr '\n' '\t' | tr ' ' '\t')
		local j=1
		#Appends one element at time to tPosed$$, inserting tabs and newlines where needed to achieve proper formating (I know now that there's a better way)
		for word in $newrow; do
			if (( $j < $newidth )); then
				printf '%s\t' "$word" >> tPosed$$
			else
				printf '%s\n' "$word" >> tPosed$$
			fi
			(( j++ ))
		done
	done
	echo $"tPosed$$"
}

#Takes matrix as input and returns the mean of each column as a 1 x N matrix
findMean(){
	local dims=$(getDims $1)
	local width=$(echo $dims | cut -d " " -f 2)
	local height=$(echo $dims | cut -d " " -f 1)
	#Loops through each column, cuts, and prepares it for summation
	for (( i=1 ; i <= $width; i++ )); do
		local curCol=$(cut -f $i $1 | tr '\n' '\t')
		local colSum=0
		#Loops through each element in a column and adds its value to the total sum of the column
		for num in $curCol; do
			colSum=$(expr $colSum + $num)
		done
		pos=$(( $colSum > 0 )) #Equals 1 if the current element is positive or 0 if it is negative
		colMean=$((( $colSum + ( $height / 2 ) * ( $pos * 2 - 1 )) / $height )) #Calculates the mean of the current column with proper rounding away from 0
		#Appends the mean of the current column to a file named mean$$ with tabs and newlines as needed
		if (( $i < $width )); then
			printf '%s\t' "$colMean" >> mean$$
		else
			printf '%s' "$colMean" >> mean$$
		fi
	done
	echo >> mean$$
	result=$(cat mean$$) #returns the contents of mean$$ rather than the file itself
	rm -f mean$$
	echo $"$result"
}

matAdd(){
	local m1=($(cat $1))
	local m2=($(cat $2))
	local size=$(wc -w $1 | cut -d " " -f 1)
	local width=$3	
	for (( i = 0; i < $size; i++ )); do
		m1[$i]=$((( m1[$i] + m2[$i] )))
	done
	local result=$(echo ${m1[@]} | tr " " '\t')
	local j=1
	for word in $result; do
		if (( $j < $width )); then
			printf '%s\t' "$word" >> trix$$
		else
			printf '%s\n' "$word" >> trix$$
			j=0
		fi
		(( j++ ))
	done
	local returnMat=$(cat trix$$)
	rm trix$$
	echo $"$returnMat"
}

multiply(){
	while read line; do
	arr=( $(echo $line) )
		for (( j = 1; j <= $4; j++ )); do
			sum=0
			arr2=( $(cut -f $j $2 | tr '\n' '\t') )
			for (( k = 0; k < $3; k++ )); do
				sum=$(( $sum + ${arr[$k]} * ${arr2[$k]} ))
			done
			if (( $j < $4 )); then
				printf '%s\t' "$sum" >> product$$
			else
				printf '%s\n' "$sum" >> product$$
			fi
		done	
	done < $1
	final=$(cat product$$)
	rm product$$
	echo $"$final"
}

if [[ $# == 0 ]]; then
	echo "Argument needed" >&2
	exit 22
fi
if [[ $# > 0 ]]; then
	if [[ $1 != 'dims' && $1 != 'transpose' && $1 != 'mean' && $1 != 'add' && $1 != 'multiply' ]]; then
		echo "Invalid argument!" >&2
		exit 12
	fi
fi
if [[ $# == 1 ]]; then
	if [[ $1 == 'add' ]] || [[ $1 == 'multiply' ]]; then
		echo "At least one file required as input" >&2
		exit 47
	fi 
	cat > tempInput$$
	input="tempInput$$"
elif [[ $# == 2 ]]; then
	input="$2"
elif [[ $# == 3 ]]; then
	input="$2"
	input2="$3"
	mdim=$(getDims $input)
	mdim2=$(getDims $input2)
	width=$(echo $mdim | cut -d " " -f 2)
	height=$(echo $mdim | cut -d " " -f 1)
	width2=$(echo $mdim2 | cut -d " " -f 2)
	height2=$(echo $mdim2 | cut -d " " -f 1)
elif [[ $# > 3 ]]; then
	echo "Too many arguments" >&2
elif [[ $# < 1 ]]; then
	echo "Too few arguments" >&2
fi

if [[ $1 == 'dims' ]]; then
	if [[ -e $input && -r $input ]]; then
		if [[ $# > 2 ]]; then
			echo "Too many arguments" >&2
			exit 43
		else 
			result=$(getDims $input)
			echo "$result"
		fi
		else
			echo "Invalid file!" >&2
			exit 51
	fi
elif [[ $1 == 'transpose' ]]; then
	if [[ -e $input && -r $input ]]; then
			tposedMat=$(tpose $input)
			cat $tposedMat
			rm -f $tposedMat
	else
		echo "Error: file unreadable" >&2
		exit 46
	fi
elif [[ $1 == 'mean' ]]; then
	mean=$(findMean $input)
	echo "$mean"
elif [[ $1 == 'add' ]]; then
	if [[ $mdim != $mdim2 ]]; then
		echo "Miss matched matricies" >&2
		exit 1
	fi
	mpm=$(matAdd $input $input2 $width)
	echo "$mpm"
elif [[ $1 == 'multiply' ]]; then 
	if (( $width == $height2 )); then
		result=$(multiply $input $input2 $width $width2)
		echo "$result"
	else
		echo "Miss matched matricies" >&2	
		exit 55
	fi
fi

rm -f tempInput$$
