#!/bin/bash

lineCount=0
colCount=0
width=0

getDims(){

	local lineCount=$(cat $1 | wc -l)

	while read line
	do
		local colCount=$(echo $line | wc -w)
	
		if [[ $width == 0 ]]; then
			width=$colCount
		fi
	
		if [[ $width != $colCount ]]; then
			exit 1
		fi
	done < $1	
	echo $"$lineCount $colCount"
}

compDims(){
	echo "Compares dimensions of two matricies"
}

tpose(){
	local dims=$(getDims $1)
	local width=$(echo $dims | cut -d " " -f 2)
	local newidth=$(echo $dims | cut -d " " -f 1)
	for (( i=1 ; i <= $width; i++ )); do 
		local newrow=$(cut -f $i $1 | tr '\n' '\t' | tr ' ' '\t')
		local j=1
		for word in $newrow; do
			if (( $j < $newidth )); then
				printf '%s\t' "$word" >> tPosed$$
			else
				printf '%s\n' "$word" >> tPosed$$
			fi
			(( j++ ))
		done
	done
	echo $"tPosed$$"
}

findMean(){

	local dims=$(getDims $1)
	local width=$(echo $dims | cut -d " " -f 2)
	local height=$(echo $dims | cut -d " " -f 1)
	
	for (( i=1 ; i <= $width; i++ )); do
		local curCol=$(cut -f $i $1 | tr '\n' '\t')
		local colSum=0
		for num in $curCol; do
			colSum=$(expr $colSum + $num)
		done
		pos=$(( $colSum > 0 ))
		colMean=$((( $colSum + ( $height / 2 ) * ( $pos * 2 - 1 )) / $height ))
		if (( $i < $width )); then
			printf '%s\t' "$colMean" >> mean$$
		else
			printf '%s' "$colMean" >> mean$$
		fi
	done
	
	echo >> mean$$
	result=$(cat mean$$)
	rm -f mean$$
	echo $"$result"
}

matAdd(){
	local m1=($(cat $1))
	local m2=($(cat $2))
	local size=$(wc -w $1 | cut -d " " -f 1)
	local width=$3	
	for (( i = 0; i < $size; i++ )); do
		m1[$i]=$((( m1[$i] + m2[$i] )))
	done
	local result=$(echo ${m1[@]} | tr " " '\t')
	local j=1
	for word in $result; do
		if (( $j < $width )); then
			printf '%s\t' "$word" >> trix$$
		else
			printf '%s\n' "$word" >> trix$$
			j=0
		fi
		(( j++ ))
	done
	local returnMat=$(cat trix$$)
	rm trix$$
	echo $"$returnMat"
}

if [[ $# == 1 ]]; then
	cat > tempInput$$
	input="tempInput$$"
elif [[ $# == 2 ]]; then
	input="$2"
elif [[ $# == 3 ]]; then
	input="$2"
	input2="$3"
	mdim=$(getDims $input)
	mdim2=$(getDims $input2)
	if [[ $mdim != $mdim2 ]]; then
		echo "Miss matched matricies"
		exit 1
	fi
	width=$(echo $mdim | cut -d " " -f 2)
	height=$(echo $mdim | cut -d " " -f 1)
elif [[ $# > 3 ]]; then
	echo "Too many arguments"
elif [[ $# < 1 ]]; then
	echo "Too few arguments"
fi

if [[ $1 == 'dims' ]]; then
	if [[ $# > 2 ]]; then
		echo "Too many arguments" >&2
		exit 43
	else 
		result=$(getDims $input)
		echo "$result"
	fi
elif [[ $1 == 'transpose' ]]; then
	tposedMat=$(tpose $input)
	cat $tposedMat
	rm -f $tposedMat

elif [[ $1 == 'mean' ]]; then
	mean=$(findMean $input)
	echo "$mean"
elif [[ $1 == 'add' ]]; then
	#echo "The height is $height and width is $width"
	mpm=$(matAdd $input $input2 $width)
	echo "$mpm"
elif [[ $1 == 'multiply' ]]; then 
	exit 0
fi

rm -f tempInput$$
