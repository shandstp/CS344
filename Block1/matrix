#!/bin/bash

lineCount=0
colCount=0
width=0

getDims(){

	local lineCount=$(cat $1 | wc -l)

	while read line
	do
		local colCount=$(echo $line | wc -w)
	
		if [[ $width == 0 ]]; then
			width=$colCount
		fi
	
		if [[ $width != $colCount ]]; then
			exit 1
		fi
	done < $1	
	echo $"$lineCount $colCount"
}

compDims(){
	echo "Compares dimensions of two matricies"
}

tpose(){
	local dims=$(getDims $1)
	local width=$(echo $dims | cut -d " " -f 2)
	local newidth=$(echo $dims | cut -d " " -f 1)
	for (( i=1 ; i <= $width; i++ )); do 
		local newrow=$(cut -f $i $1 | tr '\n' '\t' | tr ' ' '\t')
		local j=1
		for word in $newrow; do
			if (( $j < $newidth )); then
				printf '%s\t' "$word" >> tPosed$$
			else
				printf '%s\n' "$word" >> tPosed$$
			fi
			(( j++ ))
		done
	done
	echo $"tPosed$$"
}

findMean(){

	local dims=$(getDims $1)
	local width=$(echo $dims | cut -d " " -f 2)
	local height=$(echo $dims | cut -d " " -f 1)
	
	for (( i=1 ; i <= $width; i++ )); do
		local curCol=$(cut -f $i $1 | tr '\n' '\t')
		local colSum=0
		for num in $curCol; do
			echo "colSum is $colSum and num is $num" >> trouble
			colSum=$(expr $colSum + $num)
		done
		echo "now colSum is $colSum and height is $height" >> trouble
		colMean=$(expr $colSum / $height)
		printf '%s\t' "$colMean" >> mean$$
	done
	
	echo >> mean$$
	result=$(cat mean$$)
	rm -f mean$$
	echo $"$result"
}

if [[ $# < 2 ]]; then
	cat > tempInput$$
	input="tempInput$$"
else
	input="$2"
fi


if [[ $1 == 'dims' ]]; then
	if [[ $# > 2 ]]; then
		echo "Too many arguments" >&2
		exit 43
	else 
		result=$(getDims $input)
		echo "$result"
	fi
elif [[ $1 == 'transpose' ]]; then
	tposedMat=$(tpose $input)
	cat $tposedMat
	rm -f $tposedMat

elif [[ $1 == 'mean' ]]; then
	mean=$(findMean $input)
	echo "$mean"
elif [[ $1 == 'add' ]]; then
	exit 0
elif [[ $1 == 'multiply' ]]; then 
	exit 0
fi

rm -f tempInput$$
